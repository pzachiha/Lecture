Лекция 1. Парадигмы программирования. Методические и технические приемы, обеспечивающие качественную модульную структуру.
Тезисы:
☻ Тенденции ООП: Повышение уровня абстракции, выделение типичных конструкций, улучшение безопасности и расширяемости.
☻ Основные понятия: Наследование, полиморфизм, инкапсуляция, абстракция, композиция.
☻ SOLID — это аббревиатура от названий принципов объектно-ориентированного программирования (ООП), которые помогают разработчикам писать поддерживаемый и масштабируемый код.
  S — Single Responsibility Principle — Принцип единственной ответственности.
  O — Open/Closed Principle — Принцип открытости/закрытости.
  L — Liskov Substitution Principle — Принцип подстановки Барбары Лисков. 
  I — Interface Segregation Principle — Принцип разделения интерфейса.
  D — Dependency Inversion Principle — Принцип инверсии зависимостей.
☻ При написании кода следует использовать "говорящие" имена, соблюдать отступы, длина функции — 25 строк, строки — 120 символов, использовать комментарии в форматах Doxygen/Javadoc для документации модуля, структуры, класса и функции.

Лекция 2. Инструментальные средства. Системы контроля версий.
Тезисы:
☻ Системы контроля версий: локальные, централизованные, распределенные.
☻ Gitflow - методология работы с Git, определяет, какие ветки нужно создать и как производить их слияние.
☻ Файлы можно удалять с помощью .gitignore; нового репозитория (без мусора); Git-filter-branch; BFG Repo-Cleaner.
☻ При работе с чужим репозиторием, нужно его склонировать или использовать Pull Request.
